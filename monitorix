#!/usr/bin/env perl
#
# Monitorix - A lightweight system monitoring tool.
#
# Copyright (C) 2005-2013 by Jordi Sanfeliu <jordi@fibranet.cat>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

require 5.006;

use strict;
use warnings;
use FindBin qw($Bin);
use lib $Bin . "/lib", "/usr/lib/monitorix";

use Monitorix;
use HTTPServer;
use POSIX qw(WNOHANG LC_TIME setlocale uname pause setsid);
use Config::General;
use Getopt::Std;
use Cwd qw(abs_path);

# Force a standard locale
$ENV{LANG} = "";
setlocale(LC_TIME, "C");

$SIG{'INT' } = 'INT_handler';
$SIG{'ABRT'} = 'INT_handler';
$SIG{'QUIT'} = 'INT_handler';
$SIG{'TRAP'} = 'INT_handler';
$SIG{'STOP'} = 'INT_handler';
$SIG{'TERM'} = 'INT_handler';
$SIG{'CHLD'} = 'CHLD_handler';
$SIG{'HUP' } = 'HUP_handler';

use constant VERSION	=> "3.4.0";
use constant RELDATE	=> "02-Dec-2013";

my @suppsys = ("Linux", "FreeBSD", "OpenBSD", "NetBSD");
our %config;
our %options;

sub INT_handler {
	my ($signal) = @_;

	logger("SIG$signal caught.");
	flush_accounting_rules(\%config, $options{d});
	if(lc($config{httpd_builtin}->{enabled} eq "y")) {
		kill(15, $config{httpd_pid});
	}
	logger("Exiting.");
	exit(0);
}

sub CHLD_handler {
	my $pid = waitpid(-1, WNOHANG);
}

sub HUP_handler {
	my ($signal) = @_;
	my $myself = (caller(0))[3];

	my (undef, undef, $uid) = getpwnam($config{httpd_builtin}->{user});
	my (undef, undef, $gid) = getgrnam($config{httpd_builtin}->{group});

	logger("SIG$signal caught.");

	# upon receiving a SIGHUP signal a new logfile opened
	close(STDOUT);
	close(STDERR);
	open(STDOUT, ">> $config{log_file}") || logger("Can't write to LOG: $!");
	open(STDERR, ">> $config{log_file}") || logger("Can't write to LOG: $!");
	logger("$myself: opening a new log file.");

	# create the HTTPd logfile
	open(OUT, "> " . $config{httpd_builtin}->{log_file});
	close(OUT);
	chown($uid, $gid, $config{httpd_builtin}->{log_file});
}

sub daemonize {
	chdir("/") || die "Can't chdir to /: $!";
	open(STDIN, "< /dev/null") || die "Can't read /dev/null: $!";
	open(STDOUT, ">> $config{log_file}") || die "Can't write to LOG: $!";
	umask(022) || die "Unable to umask 022: $!";
	exit if fork();	# parent exits
	(setsid() != -1) || die "Can't start a new session: $!";
	open(STDERR, ">> $config{log_file}") || die "Can't write to LOG: $!";
}

sub usage {
	print(STDERR << "EOF");
Usage: monitorix -c configfile [-p pidfile] [-d none | graph[,graph] | all ] [-v]

EOF
	exit(1);
}

sub create_index {
	my $myself = (caller(0))[3];

	my $n;
	my $gname;
	my $bgcolor;
	my $table_back_color;
	my $title_back_color;
	my $title_fore_color;

	# keep backwards compatibility for v3.2.1 and less
	if(ref($config{theme}) ne "HASH") {
		logger("$myself: WARNING: the <theme> option is not valid. Please consider upgrading your configuration file. Defaulting to white theme.");
		delete($config{theme});
		$config{theme}->{white}->{main_bg} = "FFFFFF";
		$config{theme}->{white}->{main_fg} = "000000";
		$config{theme}->{white}->{title_bg} = "777777";
		$config{theme}->{white}->{title_fg} = "CCCC00";
		$config{theme}->{white}->{graph_bg} = "CCCCCC";
		$config{theme_color} = "white";
	}

	my $theme = $config{theme_color};
	if($config{theme}->{$theme}) {
		$bgcolor = $config{theme}->{$theme}->{main_bg};
		$table_back_color = $config{theme}->{$theme}->{graph_bg};
		$title_back_color = $config{theme}->{$theme}->{title_bg};
		$title_fore_color = $config{theme}->{$theme}->{title_fg};
	} else {
		logger("$myself: ERROR: invalid value in 'theme_color' option");
	}

	# force to only one trailing slash
	(my $base_url = $config{base_url}) =~ s/\/*$/\//;
	(my $base_cgi = $config{base_cgi}) =~ s/\/*$/\//;

	if(!open(OUT, "> $config{base_dir}/index.html")) {
		die "unable to create '${config{base_dir}}index.html': $!";
	}
	print(OUT <<EOF);
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html>
 <head>
  <title>$config{title}</title>
  <link rel="shortcut icon" href="$base_url$config{favicon}">
 </head>
 <body bgcolor="$bgcolor" text="#888888" vlink="#888888" link="#888888">
  <center>
  <p>
  <br>
  <font face="Verdana, sans-serif">
  <table>
    <tr>
      <td>
        <a href="http://www.monitorix.org/"><img src="$base_url$config{logo_top}" border="0"></a>
      </td>
    </tr>
    <tr>
      <td>
        <h2 align="right">v@{[VERSION]}</h2>
      </td>
    </tr>
  </table>
  <p>
  <form action="${base_cgi}monitorix.cgi" method="get">
    <table cellspacing="5" cellpadding="0" bgcolor="$table_back_color" border="1">
      <tr>
        <td bgcolor="$title_back_color">
          <font color="$title_fore_color">
<b>&nbsp;Hostname&nbsp;</b>
          </font>
       </td>
        <td bgcolor="$title_back_color">
          <font color="$title_fore_color">
<b>&nbsp;Graph&nbsp;</b>
          </font>
       </td>
     </tr>
      <tr>
EOF

	print(OUT "        <td bgcolor='$bgcolor'>\n");
	print(OUT "          <select name='mode' size='1'>\n");
	print(OUT "            <optgroup label='Local Host'>\n");
	print(OUT "            <option value='localhost'>localhost</option>\n");
	print(OUT "            </optgroup>\n");

	if(scalar(my @remotehost_list = split(',', $config{multihost}->{remotehost_list})) && lc($config{multihost}->{enabled}) eq "y") {
		print(OUT "            <optgroup label='Multihost'>\n");
		print(OUT "            <option value='multihost.all'>All</option>\n");
		for($n = 0; $n < scalar(@remotehost_list); $n++) {
			print(OUT "              <option value='multihost.$n'>" . trim($remotehost_list[$n]) . "</option>\n");
                              }
		print(OUT "            </optgroup>\n");

		if(lc($config{multihost}->{groups}) eq "y" ) {
			my @remotegroup_list = split(',', $config{multihost}->{remotegroup_list});
			print(OUT "            <optgroup label='Multihost-Groups'>\n");
			print(OUT "            <option value='multihost.group'>All Groups</option>\n");
			for($n = 0; $n < scalar(@remotegroup_list); $n++) {
				print(OUT "              <option value='multihost.group$n'>" . trim($remotegroup_list[$n]) . "</option>\n");
			}
			print(OUT "            </optgroup>\n");
		}
	}

	if(scalar(my @tal = split(',', $config{traffacct}->{list})) && lc($config{traffacct}->{enabled}) eq "y") {
		print(OUT "            <optgroup label='Traffic Accounting'>\n");
		print(OUT "              <option value='traffacct.all'>All</option>\n");
		for($n = 0; $n < scalar(@tal); $n++) {
			print(OUT "              <option value='traffacct.$n'>" . trim($tal[$n]) . "</option>\n");
                              }
		print(OUT "            </optgroup>\n");
	}
	print(OUT "          </select>\n");
	print(OUT "        </td>\n");



	print(OUT "        <td bgcolor='$bgcolor'>\n");
	print(OUT "          <select name='graph' size='1'>\n");
	print(OUT "            <option value='all'>All graphs</option>\n");
	foreach (split(',', $config{graph_name})) {
		my $g = trim($_);
		if(lc($config{graph_enable}->{$g}) eq "y") {
			print(OUT "            <optgroup label='" . $config{graph_title}->{$g} . "'>\n");
			if($g eq "proc") {
				for($n = 0; $n < $config{proc}->{max}; $n++) {
					$gname = "_" . $g;
					print(OUT "              <option value='" . $gname . $n . "'>" . $config{graphs}->{$gname} . " " . $n . "</option>\n");
				}
				next;
			}
			if($g eq "fs") {
				$n = 0;
				foreach my $k (sort keys %{$config{graphs}}) {
					if($k =~ m/$g/) {
						$gname = "_" . $g . ++$n;
						my $gname2 = "_" . $g . "0" . $n;
						if($config{graphs}->{$gname}) {
							print(OUT "              <option value='" . $gname2 ."'>" . $config{graphs}->{$gname} . "</option>\n");
						}
					}
				}
				next;
			}
			if($g eq "net") {
				my $n2;
				for($n = 0; $n < scalar(my @nl = split(',', $config{net}->{list})); $n++) {
					$gname = "_" . $g;
					for($n2 = 1; $n2 <= 3; $n2++) {
						my $str = trim($nl[$n]) . " " . $config{graphs}->{$gname . $n2};
						print(OUT "              <option value='" . $gname . $n . $n2 . "'>" . $str . "</option>\n");
					}
				}
				next;
			}
			if($g eq "port") {
				for($n = 0; $n < $config{port}->{max} && $n < scalar(my @port_list = split(',', $config{port}->{list})); $n++) {
					my $num = trim($port_list[$n]);
					my $name = trim((split(',', $config{port}->{desc}->{$num}))[0]);
					my $pcon = trim((split(',', $config{port}->{desc}->{$num}))[2]);
					$gname = "_" . $g;
					foreach my $c (split('/', $pcon)) {
						$c = uc(trim($c));
						print(OUT "              <option value='" . $gname . $n . "'>" . $config{graphs}->{$gname} . " " . $num . " (" . $c . "-" . $name . ")" . "</option>\n");
					}
				}
				next;
			}
			if($g eq "fail2ban") {
				for($n = 0; $n < scalar(my @fail2ban_list = split(',', $config{fail2ban}->{list})); $n++) {
					my $name = trim($fail2ban_list[$n]);
					$gname = "_" . $g;
					print(OUT "              <option value='" . $gname . $n . "'>" . $name . "</option>\n");
				}
				next;
			}
			$n = 0;
			foreach my $k (sort keys %{$config{graphs}}) {
				if($k =~ m/$g/) {
					$gname = "_" . $g . ++$n;
					if($config{graphs}->{$gname}) {
						print(OUT "              <option value='" . $gname ."'>" . $config{graphs}->{$gname} . "</option>\n");
					}
				}
			}
			print(OUT "            </optgroup>\n");
		}
	}
	print(OUT "          </select>\n");
	print(OUT "        </td>\n");


	print(OUT <<EOF);
     </tr>
    </table>
    <p>
    <table cellspacing="5" cellpadding="0" bgcolor="$table_back_color" border="1">
     <tr>
        <td bgcolor="$title_back_color">
          <input type="radio" checked name="when" value="1day">
            <font color="$title_fore_color"><b>Daily&nbsp;</b></font>
        </td>
        <td bgcolor="$title_back_color">
          <input type="radio" name="when" value="1week">
            <font color="$title_fore_color"><b>Weekly&nbsp;</b></font>
        </td>
        <td bgcolor="$title_back_color">
          <input type="radio" name="when" value="1month">
            <font color="$title_fore_color"><b>Monthly&nbsp;</b></font>
        </td>
        <td bgcolor="$title_back_color">
          <input type="radio" name="when" value="1year">
            <font color="$title_fore_color"><b>Yearly&nbsp;</b></font>
        </td>
      </tr>
EOF

	if($config{max_historic_years} > 1) {
		print(OUT "      <tr>\n");
	}
	for($n = 2; $n <= $config{max_historic_years}; $n++) {
		print(OUT <<EOF);
        <td bgcolor="$title_back_color">
          <input type="radio" name="when" value="${n}year">
            <font color="$title_fore_color"><b>$n Years&nbsp;</b></font>
        </td>
EOF
	}
	if($config{max_historic_years} > 1) {
		print(OUT "      </tr>\n");
	}

	print(OUT <<EOF);
    </table>
    <p>
    <input type="hidden" name="color" value="$theme">
    <input type="submit" value="    Ok    ">
  </form>
  </font>
  </center>
 </body>
</html>
EOF
	close(OUT);
}


# Main
# ----------------------------------------------------------------------------
getopts("d:vc:p:", \%options) || usage();

if($options{v}) {
	print("Monitorix version " . VERSION . " (" . RELDATE . ")\n");
	print("by Jordi Sanfeliu <jordi\@fibranet.cat>\n");
	print("http://www.monitorix.org/\n\n");
	exit(0);
}
if(!$options{c}) {
	usage();
	exit(1);
}
$options{c} = abs_path($options{c}) unless $^V lt 5.6.2;
if(!stat($options{c})) {
	die "can't open file '$options{c}': $!";
}

# load configuration file
my $conf = new Config::General(
	-ConfigFile => $options{c},
);
%config = $conf->getall;
$config{debug} = ();
$config{func_update} = ();

# get the current OS and kernel version and check its support
my $release;
($config{os}, undef, $release) = uname();
my ($major, $minor) = split('\.', $release);
$minor =~ m/^(\d+)/;
$config{kernel} = $major . "." . $1;
if(!grep {$_ eq $config{os}} @suppsys) {
	die "FATAL: your operating system ($config{os}) is not supported.";
}

if(grep {$_ eq $config{os}} ("FreeBSD", "OpenBSD", "NetBSD")) {
	$SIG{'CHLD'} = 'DEFAULT';
}	

$0 = sprintf("%s %s%s%s%s",
	$^V lt 5.6.2 ? "monitorix" : abs_path($0),
	$options{c} ? "-c $options{c}" : "",
	$options{p} ? " -p $options{p}" : "",
	$options{d} ? " -d $options{d}" : "",
	$options{v} ? " -v" : "");

daemonize();
logger("Starting Monitorix version " . VERSION . " (pid $$).");

if($options{p}) {
	$options{p} = abs_path($options{p});
	open(OUT, "> $options{p}")
		|| die "could not open '$options{p}' for writing: $!";
	print(OUT "$$");
	close(OUT);
}

# change to a safety directory
unless(chdir("/tmp")) {
	die "can't chdir to /tmp: $!";
}

if($options{d}) {
	if($options{d} ne "none" && $options{d} ne "all") {
		@{$config{debug}} = split(',', $options{d});
		foreach my $t (@{$config{debug}}) {
			if(!grep {trim($_) eq $t} (split(',', $config{graph_name} . ", traffacct, emailreports"))) {
				die "Invalid debug key '$t'";
			}
		}
	}
	logger("Entering in debug mode.");
	logger("Changed process name to '$0'.");
}

# save the path of the configuration file
if(open(OUT, "> " . $config{base_dir} . "/cgi/monitorix.conf.path")) {
	print(OUT "$options{c}\n");
	close(OUT);
} else {
	logger("Unable to create the file '$config{base_dir}/cgi/monitorix.conf.path'.");
}

flush_accounting_rules(\%config, $options{d});

logger("Initializing graphs.") unless !$options{d};
foreach (split(',', $config{graph_name} . ", traffacct")) {
	my $g = trim($_);
	my $e = "n";

	if($g eq "traffacct") {
		$e = lc($config{$g}->{enabled});
	} else {
		$e = lc($config{graph_enable}->{$g});
	}

	if($e eq "y") {
		my $init = $g . "_init";
		my $d = $g;

		undef($d) if(!grep {trim($_) eq $d} (@{$config{debug}}));
		if(defined($options{d}) && $options{d} eq "all") {
			$d = $g;
		}

		eval "use $g qw(" . $init . " " . $g . "_update)";
		if($@) {
			logger("WARNING: unable to find module '$g'");
			next;
		}
		{
			no strict "refs";
			eval { &$init($g, \%config, $d); };
		}
		logger("WARNING: unexpected errors in function $init()") if($@);
	}
}

if(!scalar($config{func_update})) {
	logger("Nothing to do, exiting.");
	exit(0);
}

logger("Generating the 'index.html' file.") unless !$options{d};
create_index();

if(lc($config{httpd_builtin}->{enabled} eq "y")) {
	httpd_setup(\%config, $options{d});
	logger("Built-in HTTP server pid is '$config{httpd_pid}'.") if (defined($config{httpd_pid}));
}

if(!$config{global_zoom}) {
	logger("WARNING: the 'global_zoom' option is not valid or doesn't exist. Please consider upgrading your configuration file.");
	$config{global_zoom} = 1;
}
if(!$config{max_historic_years}) {
	logger("WARNING: the 'max_historic_years' option doesn't exist. Please consider upgrading your configuration file.");
	$config{max_historic_years} = 1;
}
if($config{max_historic_years} > 5) {
	logger("WARNING: the 'max_historic_years' option exceeds the maximum years permitted (5).");
	exit(0);
}

logger("Ok, done.") unless !$options{d};

while(1) {
	local $SIG{'ALRM'} = sub { };
	alarm(1);
	pause();

	my ($sec, $min, $hour, $mday, $mon, undef, $wday) = localtime(time);

	# call to all enabled graphs on every minute
	if($sec == 0) {
		foreach my $f (@{$config{func_update}}) {
			my $update = $f . "_update";
			my $d = $f;
			logger("Calling $update()") unless !$options{d};

			undef($d) if(!grep {trim($_) eq $d} (@{$config{debug}}));
			if(defined($options{d}) && $options{d} eq "all") {
				$d = $f;
			}

			{
				no strict "refs";
				eval { &$update($f, \%config, $d); };
				if($@) {
					logger("$update(): $@");
				}
			}
		}

		# TRAFFACCT graph daily reports
		if(lc($config{traffacct}->{enabled}) eq "y" && lc($config{traffacct}->{reports}->{enabled}) eq "y") {
			my $d = "traffacct";
			undef($d) if(!grep {trim($_) eq $d} (@{$config{debug}}));

			# at 00:00h
			if($min == 0 && $hour == 0) {

				# collect traffic accounting every day
				eval { traffacct::traffacct_getcounters(\%config, $d); };
				if($@) {
					logger("traffacct::traffacct_getcounters(): $@");
				}

				# send reports every first day of a month
				if($mday == 1) {
					eval { traffacct::traffacct_sendreports(\%config, $d); };
					if($@) {
						logger("traffacct::traffacct_sendreports(): $@");
					}
				}
			}
		}

		# Email Reports
		if(lc($config{emailreports}->{enabled}) eq "y") {
			my $emailreports = $config{emailreports};
			my $email_m = $emailreports->{minute};
			my $email_h = $emailreports->{hour};
			my $d = "emailreports";
			undef($d) if(!grep {trim($_) eq $d} (@{$config{debug}}));

			if($min == $email_m && $hour == $email_h) {

				eval "use emailreports qw(emailreports_send)";
				if($@) {
					logger("WARNING: unable to find module 'emailreports'");
					next;
				}

				# daily
				if(lc($emailreports->{daily}->{enabled}) eq "y") {
					eval { emailreports::emailreports_send(\%config, "daily", "1day", $d); };
					if($@) {
						logger("emailreports::emailreports_send(): $@");
					}
				}

				# weekly (send reports on every Monday)
				if($wday == 1) {
					if(lc($emailreports->{weekly}->{enabled}) eq "y") {
						eval { emailreports::emailreports_send(\%config, "weekly", "1week", $d); };
						if($@) {
							logger("emailreports::emailreports_send(): $@");
						}
					}
				}

				# monthly (send reports every first day of each month)
				if($mday == 1) {
					if(lc($emailreports->{monthly}->{enabled}) eq "y") {
						eval { emailreports::emailreports_send(\%config, "monthly", "1month", $d); };
						if($@) {
							logger("emailreports::emailreports_send(): $@");
						}
					}
				}

				# yearly (send reports every first day of each year)
				if($mon == 0 && $mday == 1) {
					if(lc($emailreports->{yearly}->{enabled}) eq "y") {
						eval { emailreports::emailreports_send(\%config, "yearly", "1year", $d); };
						if($@) {
							logger("emailreports::emailreports_send(): $@");
						}
					}
				}
			}
		}
	}
}
